What happens when you initialize a repository? Why do you need to do it?

The .git folder is created, and the configuration files that will keep track of the repository are generated. You need to do it because it is the way to tell your git tool to keep track of the files in that directory.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

In the working directory you only have the files, with no tracking information. In the repository, you have the last files but also the tracking that allows you to get back to any of the previous commits. The advantage of the staging area is that is something in between, where you can keep track of the changes you are doing but before commiting them.

How can you use the staging area to make sure you have one commit per logical
change?

By adding the changes to the staging area I can then sequentially commit the features separatedly.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

I think they will be specially useful for new features that might involve many changes and that might not end up staying. And in any ocassion in which the software is going to be distributed, having a stable version and development versions can be fundamental.

How do the diagrams help you visualize the branch structure?
By showing the commits as nodes of a tree and how they map and connect to each other, which makes easier to understand where do you are in the structure, which can became pretty complicated and non-linear.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
